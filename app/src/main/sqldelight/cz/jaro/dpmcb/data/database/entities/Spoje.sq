import kotlin.Boolean;
import kotlin.Int;
import cz.jaro.dpmcb.data.entities.TimeCodeType;
import cz.jaro.dpmcb.data.entities.VehicleType;
import cz.jaro.dpmcb.data.entities.LineType;
import cz.jaro.dpmcb.data.entities.Direction;
import cz.jaro.dpmcb.data.entities.Table;
import cz.jaro.dpmcb.data.entities.BusNumber;
import cz.jaro.dpmcb.data.entities.LongLine;
import cz.jaro.dpmcb.data.entities.ShortLine;
import cz.jaro.dpmcb.data.entities.BusName;
import cz.jaro.dpmcb.data.entities.Validity;
import cz.jaro.dpmcb.data.entities.StopNumber;
import cz.jaro.dpmcb.data.entities.SequenceGroup;
import cz.jaro.dpmcb.data.entities.SequenceCode;
import kotlinx.datetime.LocalDate;
import kotlinx.datetime.LocalTime;

CREATE TABLE IF NOT EXISTS `TimeCode` (
    `tab` TEXT AS Table NOT NULL,
    `connNumber` INTEGER AS BusNumber NOT NULL,
    `code` INTEGER NOT NULL,
    `termIndex` INTEGER NOT NULL,
    `line` INTEGER AS LongLine NOT NULL,
    `type` TEXT AS TimeCodeType NOT NULL,
    `runs2` INTEGER AS Boolean NOT NULL,
    `validFrom` TEXT AS LocalDate NOT NULL,
    `validTo` TEXT AS LocalDate NOT NULL,
    PRIMARY KEY(
        `tab`,
        `connNumber`,
        `code`,
        `termIndex`
    )
);
CREATE TABLE IF NOT EXISTS `Line` (
    `tab` TEXT AS Table NOT NULL,
    `number` INTEGER AS LongLine NOT NULL,
    `route` TEXT NOT NULL,
    `vehicleType` TEXT AS VehicleType NOT NULL,
    `lineType` TEXT AS LineType NOT NULL,
    `hasRestriction` INTEGER AS Boolean NOT NULL,
    `shortNumber` INTEGER AS ShortLine NOT NULL,
    `validFrom` TEXT AS LocalDate NOT NULL,
    `validTo` TEXT AS LocalDate NOT NULL,
    PRIMARY KEY(
        `tab`
    )
);
CREATE TABLE IF NOT EXISTS `Conn` (
    `tab` TEXT AS Table NOT NULL,
    `connNumber` INTEGER AS BusNumber NOT NULL,
    `line` INTEGER AS LongLine NOT NULL,
    `fixedCodes` TEXT NOT NULL,
    `direction` TEXT AS Direction NOT NULL,
    `name` TEXT AS BusName NOT NULL,
    PRIMARY KEY(
        `tab`,
        `connNumber`
    )
);
CREATE TABLE IF NOT EXISTS `Stop` (
    `tab` TEXT AS Table NOT NULL,
    `stopNumber` INTEGER AS StopNumber NOT NULL,
    `line` INTEGER AS LongLine NOT NULL,
    `stopName` TEXT NOT NULL,
    `fixedCodes` TEXT NOT NULL,
    PRIMARY KEY(
        `tab`,
        `stopNumber`
    )
);
CREATE TABLE IF NOT EXISTS `ConnStop` (
    `tab` TEXT AS Table NOT NULL,
    `connNumber` INTEGER AS BusNumber NOT NULL,
    `stopIndexOnLine` INTEGER AS Int NOT NULL,
    `line` INTEGER AS LongLine NOT NULL,
    `stopNumber` INTEGER AS StopNumber NOT NULL,
    `kmFromStart` INTEGER NOT NULL,
    `fixedCodes` TEXT NOT NULL,
    `arrival` TEXT AS LocalTime,
    `departure` TEXT AS LocalTime,
    PRIMARY KEY(
        `tab`,
        `connNumber`,
        `stopIndexOnLine`
    )
);
CREATE TABLE IF NOT EXISTS `SeqOfConn` (
    `line` INTEGER AS LongLine NOT NULL,
    `connNumber` INTEGER AS BusNumber NOT NULL,
    `sequence` TEXT AS SequenceCode NOT NULL,
    `group` INTEGER AS SequenceGroup NOT NULL,
    `orderInSequence` INTEGER,
    PRIMARY KEY(
        `line`,
        `connNumber`,
        `sequence`,
        `group`
    )
);
CREATE TABLE IF NOT EXISTS `SeqGroup` (
    `group` INTEGER AS SequenceGroup NOT NULL,
    `validFrom` TEXT AS LocalDate NOT NULL,
    `validTo` TEXT AS LocalDate NOT NULL,
    PRIMARY KEY(
        `group`
    )
);

findLongLine:
SELECT `number` FROM `Line`
WHERE `shortNumber` = :line
LIMIT 1;

stopNames:
SELECT DISTINCT `stopName` FROM `Stop`
WHERE `tab` IN :tabs
ORDER BY `stopName`;

lineNumbers:
SELECT DISTINCT `shortNumber` FROM `Line`
WHERE `tab` IN :tabs
ORDER BY `shortNumber`;

nextStops:
WITH hereRunningConns AS (
    SELECT DISTINCT `Conn`.* FROM `ConnStop`
    JOIN `Conn` ON `Conn`.`tab` = `ConnStop`.`tab` AND `Conn`.`connNumber` = `ConnStop`.`connNumber`
    JOIN `Stop` ON `Stop`.`stopNumber` = `ConnStop`.`stopNumber` AND `Stop`.`tab` = `ConnStop`.`tab`
    WHERE `Stop`.`stopName` = :thisStop
    AND `ConnStop`.`line` = :line
    AND `ConnStop`.`departure` IS NOT NULL
),
indexesOfThisStop AS (
    SELECT DISTINCT `ConnStop`.`stopIndexOnLine`, `departure`, `ConnStop`.`connNumber`, `ConnStop`.`tab` FROM `ConnStop`
    JOIN `Stop` ON `Stop`.`stopNumber` = `ConnStop`.`stopNumber` AND `Stop`.`tab` = `ConnStop`.`tab`
    JOIN `Conn` ON `Conn`.`connNumber` = `ConnStop`.`connNumber` AND `Conn`.`tab` =  `ConnStop`.`tab`
    WHERE `ConnStop`.`line` = :line
    AND `Stop`.`stopName` = :thisStop
    AND `ConnStop`.`departure` IS NOT NULL
    ORDER BY `ConnStop`.`stopIndexOnLine`
),
negative(`max`, `stopName`, indexOnLine, `Line`, `connNumber`) AS (
    SELECT DISTINCT MAX(`ConnStop`.`stopIndexOnLine`) AS `max`, `Stop`.`stopName`, `ConnStop`.`stopIndexOnLine`, :line, `Conn`.`connNumber`
    FROM `ConnStop`
    JOIN `Stop` ON `Stop`.`stopNumber` = `ConnStop`.`stopNumber` AND `Stop`.`tab` = `ConnStop`.`tab`
    JOIN hereRunningConns `Conn` ON `Conn`.`connNumber` = `ConnStop`.`connNumber` AND `Conn`.`tab` = `ConnStop`.`tab`
    JOIN indexesOfThisStop thisStop ON thisStop.`connNumber` = `ConnStop`.`connNumber` AND thisStop.`tab` = `ConnStop`.`tab`
    WHERE `ConnStop`.`stopIndexOnLine` < thisStop.`stopIndexOnLine`
    AND `Conn`.`tab` = :tab
    AND `Conn`.`direction` <> 'POSITIVE'
    AND `ConnStop`.`arrival` IS NOT NULL
    AND thisStop.`departure` IS NOT NULL
    GROUP BY `Conn`.`connNumber`, thisStop.`stopIndexOnLine`
    ORDER BY -`ConnStop`.`stopIndexOnLine`
),
positive(`min`, `stopName`, indexOnLine, `Line`, `connNumber`) AS (
    SELECT DISTINCT MIN(`ConnStop`.`stopIndexOnLine`), `Stop`.`stopName`, `ConnStop`.`stopIndexOnLine`, :line, `Conn`.`connNumber`
    FROM `ConnStop`
    JOIN `Stop` ON `Stop`.`stopNumber` = `ConnStop`.`stopNumber` AND `Stop`.`tab` = `ConnStop`.`tab`
    JOIN hereRunningConns `Conn` ON `Conn`.`connNumber` = `ConnStop`.`connNumber` AND `Conn`.`tab` = `ConnStop`.`tab`
    JOIN indexesOfThisStop thisStop ON thisStop.`connNumber` = `ConnStop`.`connNumber` AND thisStop.`tab` = `ConnStop`.`tab`
    WHERE `ConnStop`.`stopIndexOnLine` > thisStop.`stopIndexOnLine`
    AND `Conn`.`tab` = :tab
    AND `Conn`.`direction` = 'POSITIVE'
    AND `ConnStop`.`arrival` IS NOT NULL
    AND thisStop.`departure` IS NOT NULL
    GROUP BY `Conn`.`connNumber`, thisStop.`stopIndexOnLine`
    ORDER BY `ConnStop`.`stopIndexOnLine`
)
SELECT DISTINCT `stopName`
FROM positive
UNION
SELECT DISTINCT `stopName`
FROM negative;

connStopsOnLineWithNextStopAtDate:
WITH TimeCodesCountOfConn AS (
    SELECT DISTINCT `Conn`.`connNumber`, `Conn`.`tab`, COUNT(`TimeCode`.`termIndex`) `count` FROM `TimeCode`
    JOIN `Conn` ON `Conn`.`tab` = `TimeCode`.`tab` AND `Conn`.`connNumber` = `TimeCode`.`connNumber`
    GROUP BY `Conn`.`name`, `Conn`.`tab`
),
TodayRunningConns AS (
    SELECT DISTINCT `Conn`.* FROM `TimeCode`
    JOIN `Conn` ON `Conn`.`tab` = `TimeCode`.`tab` AND `Conn`.`connNumber` = `TimeCode`.`connNumber`
    JOIN TimeCodesCountOfConn ON TimeCodesCountOfConn.`connNumber` = `Conn`.`connNumber` AND TimeCodesCountOfConn.`tab` = `Conn`.`tab`
    WHERE ((
        `TimeCode`.`type` = 'RunsOnly'
        AND `TimeCode`.`validFrom` <= :date
        AND :date <= `TimeCode`.`validTo`
    ) OR (
        `TimeCode`.`type` = 'RunsAlso'
    ) OR (
        `TimeCode`.`type` = 'Runs'
        AND `TimeCode`.`validFrom` <= :date
        AND :date <= `TimeCode`.`validTo`
    ) OR (
        `TimeCode`.`type` = 'DoesNotRun'
        AND FALSE = (
            `TimeCode`.`validFrom` <= :date
            AND :date <= `TimeCode`.`validTo`
        )
    ))
    AND `Conn`.`tab` = :tab
    GROUP BY `Conn`.`name`, `Conn`.`tab`
    HAVING (
        `TimeCode`.`runs2`
        AND COUNT(`TimeCode`.`termIndex`) >= 1
    ) OR (
        FALSE = `TimeCode`.`runs2`
        AND COUNT(`TimeCode`.`termIndex`) = TimeCodesCountOfConn.`count`
    )
),
thisStopIndex AS (
    SELECT DISTINCT `ConnStop`.`stopIndexOnLine` FROM `ConnStop`
    JOIN `Stop` ON `Stop`.`stopNumber` = `ConnStop`.`stopNumber` AND `Stop`.`tab` = `ConnStop`.`tab`
    JOIN `Conn` ON `Conn`.`connNumber` = `ConnStop`.`connNumber` AND `Conn`.`tab` =  `ConnStop`.`tab`
    WHERE `Conn`.`tab` = :tab
    AND `Stop`.`stopName` = :stop
    ORDER BY `ConnStop`.`stopIndexOnLine`
),
negative(`max`, `stopName`, indexOnLine, `connNumber`, indexOnThisLine) AS (
    SELECT DISTINCT MAX(`ConnStop`.`stopIndexOnLine`), `Stop`.`stopName`, `ConnStop`.`stopIndexOnLine`, `Conn`.`connNumber`, thisStop.`stopIndexOnLine`
    FROM `ConnStop`
    JOIN `Stop` ON `Stop`.`stopNumber` = `ConnStop`.`stopNumber` AND `Stop`.`tab` = `ConnStop`.`tab`
    JOIN TodayRunningConns `Conn` ON `Conn`.`connNumber` = `ConnStop`.`connNumber` AND `Conn`.`tab` = `ConnStop`.`tab`
    CROSS JOIN thisStopIndex thisStop
    WHERE `ConnStop`.`stopIndexOnLine` < thisStop.`stopIndexOnLine`
    AND `Conn`.`direction` <> 'POSITIVE'
    AND (
        `ConnStop`.`departure` IS NOT NULL
        OR `ConnStop`.`arrival` IS NOT NULL
    )
    GROUP BY `Conn`.`connNumber`, thisStop.`stopIndexOnLine`
    ORDER BY -`ConnStop`.`stopIndexOnLine`
),
positive(`min`, `stopName`, indexOnLine, `connNumber`, indexOnThisLine) AS (
    SELECT DISTINCT MIN(`ConnStop`.`stopIndexOnLine`), `Stop`.`stopName`, `ConnStop`.`stopIndexOnLine`, `Conn`.`connNumber`, thisStop.`stopIndexOnLine`
    FROM `ConnStop`
    JOIN `Stop` ON `Stop`.`stopNumber` = `ConnStop`.`stopNumber` AND `Stop`.`tab` = `ConnStop`.`tab`
    JOIN TodayRunningConns `Conn` ON `Conn`.`connNumber` = `ConnStop`.`connNumber` AND `Conn`.`tab` = `ConnStop`.`tab`
    CROSS JOIN thisStopIndex thisStop
    WHERE `ConnStop`.`stopIndexOnLine` > thisStop.`stopIndexOnLine`
    AND `Conn`.`direction` = 'POSITIVE'
    AND (
        `ConnStop`.`departure` IS NOT NULL
        OR `ConnStop`.`arrival` IS NOT NULL
    )
    GROUP BY `Conn`.`connNumber`, thisStop.`stopIndexOnLine`
    ORDER BY `ConnStop`.`stopIndexOnLine`
),
endStopIndexOnThisLine(`connNumber`, time, `name`) AS (
    SELECT DISTINCT `ConnStop`.`connNumber`, CASE
        WHEN `ConnStop`.`departure` IS NULL THEN `ConnStop`.`arrival`
        ELSE `ConnStop`.`departure`
    END, `Stop`.`stopName` FROM `ConnStop`
    JOIN `Stop` ON `Stop`.`stopNumber` = `ConnStop`.`stopNumber` AND `Stop`.`tab` = `ConnStop`.`tab`
    JOIN `Conn` ON `Conn`.`connNumber` = `ConnStop`.`connNumber` AND `Conn`.`tab` = `ConnStop`.`tab`
    WHERE (
        `ConnStop`.`departure` IS NOT NULL
        OR `ConnStop`.`arrival` IS NOT NULL
    )
    AND `ConnStop`.`tab` = :tab
    GROUP BY `ConnStop`.`connNumber`
    HAVING MAX(CASE
        WHEN `Conn`.`direction` = 'NEGATIVE' THEN -`ConnStop`.`stopIndexOnLine`
        ELSE `ConnStop`.`stopIndexOnLine`
    END)
)
SELECT DISTINCT `ConnStop`.`departure`, (`Conn`.`fixedCodes` LIKE '%{%') lowFloor, `Conn`.`name` connName, `Conn`.`fixedCodes`, endStopIndexOnThisLine.`name` destination, `TimeCode`.`type`, `TimeCode`.`validFrom` `from`, `TimeCode`.`validTo` `to` FROM TodayRunningConns `Conn`
JOIN `ConnStop` ON `Conn`.`connNumber` = `ConnStop`.`connNumber` AND `Conn`.`tab` = `ConnStop`.`tab`
JOIN endStopIndexOnThisLine ON endStopIndexOnThisLine.`connNumber` = `ConnStop`.`connNumber`
CROSS JOIN thisStopIndex thisStop ON `ConnStop`.`stopIndexOnLine` = thisStop.`stopIndexOnLine`
LEFT JOIN positive ON positive.`connNumber` = `Conn`.`connNumber` AND positive.indexOnThisLine = `ConnStop`.`stopIndexOnLine`
LEFT JOIN negative ON negative.`connNumber` = `Conn`.`connNumber` AND negative.indexOnThisLine = `ConnStop`.`stopIndexOnLine`
JOIN `TimeCode` ON `TimeCode`.`connNumber` = `Conn`.`connNumber` AND `TimeCode`.`tab` = `Conn`.`tab`
WHERE (`Conn`.`direction` = 'POSITIVE' AND positive.`stopName` = :nextStop)
OR (`Conn`.`direction` <> 'POSITIVE' AND negative.`stopName` = :nextStop)
AND `ConnStop`.`departure` IS NOT NULL;

stopNamesOfLine:
SELECT DISTINCT `Stop`.`stopName` FROM `ConnStop`
JOIN `Stop` ON `Stop`.`stopNumber` = `ConnStop`.`stopNumber` AND `Stop`.`tab` = `ConnStop`.`tab`
JOIN `Conn` ON `Conn`.`connNumber` = `ConnStop`.`connNumber` AND `Conn`.`tab` = `ConnStop`.`tab`
WHERE `ConnStop`.`line` = :line
AND `Conn`.`tab` = :tab
ORDER BY `ConnStop`.`stopIndexOnLine`;

coreBus:
SELECT (`Conn`.`fixedCodes` LIKE '%{%') lowFloor, `Conn`.`line`, `Conn`.`fixedCodes`, CASE
    WHEN `ConnStop`.`departure` IS NULL THEN `ConnStop`.`arrival`
    ELSE `ConnStop`.`departure`
END time, `Stop`.`fixedCodes` stopFixedCodes, `ConnStop`.`fixedCodes` connStopFixedCodes, `stopName` `name`, `SeqOfConn`.`sequence`, `Conn`.`name` connName, `TimeCode`.`type`, `TimeCode`.`validFrom` `from`, `TimeCode`.`validTo` `to`, `SeqOfConn`.`group` FROM `ConnStop`
JOIN `Conn` ON `Conn`.`tab` = `ConnStop`.`tab` AND `Conn`.`connNumber` = `ConnStop`.`connNumber`
JOIN `Stop` ON `Stop`.`tab` = `ConnStop`.`tab` AND `Stop`.`stopNumber` = `ConnStop`.`stopNumber`
JOIN `TimeCode` ON `TimeCode`.`tab` = `ConnStop`.`tab` AND `TimeCode`.`connNumber` = `ConnStop`.`connNumber`
JOIN `SeqOfConn` ON `SeqOfConn`.`line` = `Conn`.`line` AND `SeqOfConn`.`connNumber` = `Conn`.`connNumber`
WHERE (
    `ConnStop`.`departure` IS NOT NULL
    OR `ConnStop`.`arrival` IS NOT NULL
)
AND `Conn`.`name` = :connName
AND `Conn`.`tab` = :tab
AND `SeqOfConn`.`group` IN :groups
ORDER BY CASE
   WHEN `Conn`.`direction` = 'POSITIVE' THEN `ConnStop`.`stopIndexOnLine`
   ELSE -`ConnStop`.`stopIndexOnLine`
END;

codes:
SELECT `Conn`.`fixedCodes`, `TimeCode`.`type`, `TimeCode`.`validFrom` `from`, `TimeCode`.`validTo` `to` FROM `TimeCode`
JOIN `Conn` ON `Conn`.`tab` = `TimeCode`.`tab` AND `Conn`.`connNumber` = `TimeCode`.`connNumber`
AND `Conn`.`name` = :connName
AND `Conn`.`tab` = :tab;

coreBusOfSequence:
SELECT (`Conn`.`fixedCodes` LIKE '%{%') lowFloor, `Conn`.`line`, `SeqOfConn`.`sequence`, `Conn`.`fixedCodes`, CASE
    WHEN `ConnStop`.`departure` IS NULL THEN `ConnStop`.`arrival`
    ELSE `ConnStop`.`departure`
END time, `Stop`.`fixedCodes` stopFixedCodes, `Line`.`validFrom`, `Line`.`validTo`, `ConnStop`.`fixedCodes` connStopFixedCodes, `stopName` `name`, `Conn`.`name` connName, `Conn`.`tab`, `TimeCode`.`type`, `TimeCode`.`validFrom` `from`, `TimeCode`.`validTo` `to` FROM `ConnStop`
JOIN `Conn` ON `Conn`.`tab` = `ConnStop`.`tab` AND `Conn`.`connNumber` = `ConnStop`.`connNumber`
JOIN `Stop` ON `Stop`.`tab` = `ConnStop`.`tab` AND `Stop`.`stopNumber` = `ConnStop`.`stopNumber`
JOIN `Line` ON `Line`.`tab` = `Conn`.`tab` AND `Line`.`number` = `Conn`.`line`
JOIN `TimeCode` ON `TimeCode`.`tab` = `ConnStop`.`tab` AND `TimeCode`.`connNumber` = `ConnStop`.`connNumber`
JOIN `SeqOfConn` ON `SeqOfConn`.`line` = `Conn`.`line` AND `SeqOfConn`.`connNumber` = `Conn`.`connNumber`
WHERE (
    `ConnStop`.`departure` IS NOT NULL
    OR `ConnStop`.`arrival` IS NOT NULL
)
AND `SeqOfConn`.`group` = :group
AND `SeqOfConn`.`sequence` LIKE :seq
ORDER BY CASE
   WHEN `Conn`.`direction` = 'POSITIVE' THEN `ConnStop`.`stopIndexOnLine`
   ELSE -`ConnStop`.`stopIndexOnLine`
END;

connsOfSeq:
SELECT DISTINCT `Conn`.`name` connName FROM `Conn`
JOIN `SeqOfConn` ON `SeqOfConn`.`connNumber` = `Conn`.`connNumber` AND `SeqOfConn`.`line` = `Conn`.`line`
WHERE `SeqOfConn`.`sequence` = :seq
AND `SeqOfConn`.`group` = :group
AND `Conn`.`tab` IN :tabs
ORDER BY `SeqOfConn`.`orderInSequence`;

firstConnOfSeq:
SELECT DISTINCT `Conn`.`name` connName FROM `Conn`
JOIN `SeqOfConn` ON `SeqOfConn`.`connNumber` = `Conn`.`connNumber` AND `SeqOfConn`.`line` = `Conn`.`line`
WHERE `SeqOfConn`.`sequence` = :seq
AND `SeqOfConn`.`group` = :group
AND `Conn`.`tab` IN :tabs
ORDER BY `SeqOfConn`.`orderInSequence`
LIMIT 1;

lastConnOfSeq:
SELECT DISTINCT `Conn`.`name` connName FROM `Conn`
JOIN `SeqOfConn` ON `SeqOfConn`.`connNumber` = `Conn`.`connNumber` AND `SeqOfConn`.`line` = `Conn`.`line`
WHERE `SeqOfConn`.`sequence` = :seq
AND `SeqOfConn`.`group` = :group
AND `Conn`.`tab` IN :tabs
ORDER BY -`SeqOfConn`.`orderInSequence`
LIMIT 1;

departures:
WITH hereRunningConns AS (
    SELECT DISTINCT `Conn`.* FROM `ConnStop`
    JOIN `Conn` ON `Conn`.`tab` = `ConnStop`.`tab` AND `Conn`.`connNumber` = `ConnStop`.`connNumber`
    JOIN `Stop` ON `Stop`.`stopNumber` = `ConnStop`.`stopNumber` AND `Stop`.`tab` = `ConnStop`.`tab`
    WHERE `Stop`.`stopName` = :stop
    AND `Conn`.`tab` IN :tabs
    AND (
        `ConnStop`.`departure` IS NOT NULL
        OR `ConnStop`.`arrival` IS NOT NULL
    )
),
thisStopIndexes AS (
    SELECT DISTINCT `ConnStop`.`stopIndexOnLine`, `ConnStop`.`tab` FROM `ConnStop`
    JOIN `Stop` ON `Stop`.`stopNumber` = `ConnStop`.`stopNumber` AND `Stop`.`tab` = `ConnStop`.`tab`
    JOIN `Conn` ON `Conn`.`connNumber` = `ConnStop`.`connNumber` AND `Conn`.`tab` =  `ConnStop`.`tab`
    AND `Stop`.`stopName` = :stop
    AND `Conn`.`tab` IN :tabs
    ORDER BY `ConnStop`.`stopIndexOnLine`
),
thisStop AS (
    SELECT `Stop`.`stopName` `name`, `Conn`.`fixedCodes`, CASE
        WHEN `ConnStop`.`departure` IS NULL THEN `ConnStop`.`arrival`
        ELSE `ConnStop`.`departure`
    END time, `ConnStop`.`stopIndexOnLine`, `ConnStop`.`fixedCodes` connStopFixedCodes, `Conn`.`connNumber`, `Conn`.`line`, `Conn`.`tab`, (`Conn`.`fixedCodes` LIKE '%{%') lowFloor
    FROM `ConnStop`
    JOIN `Stop` ON `Stop`.`stopNumber` = `ConnStop`.`stopNumber` AND `Stop`.`tab` = `ConnStop`.`tab`
    JOIN hereRunningConns `Conn` ON `Conn`.`connNumber` = `ConnStop`.`connNumber` AND `Conn`.`tab` = `ConnStop`.`tab`
    CROSS JOIN thisStopIndexes thisStop ON `ConnStop`.`tab` = thisStop.`tab` AND `ConnStop`.`stopIndexOnLine` = thisStop.`stopIndexOnLine`
)
SELECT thisStop.*, `TimeCode`.`type`, `TimeCode`.`validFrom` `from`, `TimeCode`.`validTo` `to`
FROM thisStop
JOIN hereRunningConns `Conn` ON `Conn`.`connNumber` = thisStop.`connNumber` AND `Conn`.`tab` = thisStop.`tab`
JOIN `TimeCode` ON `TimeCode`.`connNumber` = thisStop.`connNumber` AND `TimeCode`.`tab` = thisStop.`tab`;

findSequences:
SELECT DISTINCT `SeqOfConn`.`sequence` FROM `SeqOfConn`
WHERE 0
OR `SeqOfConn`.`sequence` LIKE :sequence1
OR `SeqOfConn`.`sequence` LIKE :sequence2
OR `SeqOfConn`.`sequence` LIKE :sequence3
OR `SeqOfConn`.`sequence` LIKE :sequence4
OR `SeqOfConn`.`sequence` LIKE :sequence5
OR `SeqOfConn`.`sequence` LIKE :sequence6;

lastStopTimesOfConnsInSequences:
WITH lastStopTimeOfConn(connName, time) AS (
    SELECT DISTINCT `Conn`.`name`, CASE
        WHEN `ConnStop`.`departure` IS NULL THEN `ConnStop`.`arrival`
        ELSE `ConnStop`.`departure`
    END FROM `ConnStop`
    JOIN `Conn` ON `Conn`.`connNumber` = `ConnStop`.`connNumber` AND `Conn`.`tab` = `ConnStop`.`tab`
    WHERE (
        `ConnStop`.`departure` IS NOT NULL
        OR `ConnStop`.`arrival` IS NOT NULL
    )
    AND `ConnStop`.`tab` IN :tabs
    GROUP BY `Conn`.`name`
    HAVING MAX(CASE
        WHEN `ConnStop`.`departure` IS NULL THEN `ConnStop`.`arrival`
        ELSE `ConnStop`.`departure`
    END)
)
SELECT DISTINCT `SeqOfConn`.`sequence`, lastStopTimeOfConn.* FROM `Conn`
JOIN `SeqOfConn` ON `SeqOfConn`.`connNumber` = `Conn`.`connNumber` AND `SeqOfConn`.`line` = `Conn`.`line`
JOIN lastStopTimeOfConn ON lastStopTimeOfConn.connName = `Conn`.`name`
WHERE `SeqOfConn`.`sequence` IN :todayRunningSequences
AND `SeqOfConn`.`group` IN :groups
AND `Conn`.`tab` IN :tabs
ORDER BY `SeqOfConn`.`sequence`, lastStopTimeOfConn.time;

nowRunningBuses:
SELECT `Conn`.`name` connName, `Conn`.`line`, `Conn`.`direction`, `Conn`.`tab`, CASE
    WHEN `ConnStop`.`departure` IS NULL THEN `ConnStop`.`arrival`
    ELSE `ConnStop`.`departure`
END time, `Stop`.`stopName` `name`, `SeqOfConn`.`sequence` FROM `Conn`
JOIN `ConnStop` ON `ConnStop`.`connNumber` = `Conn`.`connNumber` AND `ConnStop`.`tab` = `Conn`.`tab`
JOIN `Stop` ON `Stop`.`stopNumber` = `ConnStop`.`stopNumber` AND `Stop`.`tab` = `ConnStop`.`tab`
JOIN `SeqOfConn` ON `SeqOfConn`.`connNumber` = `Conn`.`connNumber` AND `SeqOfConn`.`line` = `Conn`.`line`
WHERE `Conn`.`name` IN :connNames
AND `SeqOfConn`.`group` IN :groups
AND `Conn`.`tab` IN :tabs
AND (
    `ConnStop`.`departure` IS NOT NULL
    OR `ConnStop`.`arrival` IS NOT NULL
)
ORDER BY CASE
   WHEN `Conn`.`direction` = 'POSITIVE' THEN `ConnStop`.`stopIndexOnLine`
   ELSE -`ConnStop`.`stopIndexOnLine`
END;

fixedCodesOfTodayRunningSequencesAccordingToTimeCodes:
WITH CountOfConnsInSequence AS (
    SELECT COUNT(DISTINCT `connNumber`) count, `sequence`
    FROM `SeqOfConn`
    WHERE `SeqOfConn`.`group` IN :groups
    GROUP BY `sequence`
),
TimeCodesOfSeq AS (
    SELECT `SeqOfConn`.`sequence`, `TimeCode`.*
    FROM `TimeCode`
    JOIN `SeqOfConn` ON `SeqOfConn`.`line` = `TimeCode`.`line` AND `SeqOfConn`.`connNumber` = `TimeCode`.`connNumber`
    JOIN CountOfConnsInSequence c ON c.`sequence` = `SeqOfConn`.`sequence`
    WHERE `SeqOfConn`.`group` IN :groups
    GROUP BY `validFrom` || `validTo` || `type`, `SeqOfConn`.`sequence`, `TimeCode`.`tab`
    HAVING COUNT(DISTINCT `SeqOfConn`.`connNumber`) = c.`count`
    ORDER BY `SeqOfConn`.`sequence`, `type`, `validTo`, `validFrom`
),
TimeCodesCountOfSeq AS (
    SELECT DISTINCT `sequence`, COUNT(*) `count` FROM TimeCodesOfSeq `TimeCode`
    GROUP BY `sequence`, `tab`
),
TodayRunningSequences AS (
    SELECT DISTINCT `TimeCode`.`sequence` FROM TimeCodesOfSeq `TimeCode`
    JOIN TimeCodesCountOfSeq ON TimeCodesCountOfSeq.`sequence` = `TimeCode`.`sequence`
    AND ((
        `TimeCode`.`type` = 'RunsOnly'
        AND `TimeCode`.`validFrom` <= :date
        AND :date <= `TimeCode`.`validTo`
    ) OR (
        `TimeCode`.`type` = 'RunsAlso'
    ) OR (
        `TimeCode`.`type` = 'Runs'
        AND `TimeCode`.`validFrom` <= :date
        AND :date <= `TimeCode`.`validTo`
    ) OR (
        `TimeCode`.`type` = 'DoesNotRun'
        AND FALSE = (
            `TimeCode`.`validFrom` <= :date
            AND :date <= `TimeCode`.`validTo`
        )
    ))
    GROUP BY `TimeCode`.`sequence`, `TimeCode`.`tab`
    HAVING (
        `TimeCode`.`runs2`
        AND COUNT(*) >= 1
    ) OR (
        FALSE = `TimeCode`.`runs2`
        AND COUNT(*) = TimeCodesCountOfSeq.`count`
    )
),
endStopIndexOnThisLine(`sequence`, time, `name`) AS (
    SELECT DISTINCT `SeqOfConn`.`sequence`, CASE
        WHEN `ConnStop`.`departure` IS NULL THEN `ConnStop`.`arrival`
        ELSE `ConnStop`.`departure`
    END, `Stop`.`stopName` FROM `ConnStop`
    JOIN `Stop` ON `Stop`.`stopNumber` = `ConnStop`.`stopNumber` AND `Stop`.`tab` = `ConnStop`.`tab`
    JOIN `SeqOfConn` ON `SeqOfConn`.`connNumber` = `ConnStop`.`connNumber` AND `SeqOfConn`.`line` = `ConnStop`.`line`
    WHERE (
        `ConnStop`.`departure` IS NOT NULL
        OR `ConnStop`.`arrival` IS NOT NULL
    )
    AND `ConnStop`.`tab` IN :tabs
    GROUP BY `SeqOfConn`.`sequence`
    HAVING MAX(CASE
        WHEN `ConnStop`.`departure` IS NULL THEN `ConnStop`.`arrival`
        ELSE `ConnStop`.`departure`
    END)
),
startStopIndexOnThisLine(`sequence`, time, `name`) AS (
    SELECT DISTINCT `SeqOfConn`.`sequence`, CASE
        WHEN `ConnStop`.`departure` IS NULL THEN `ConnStop`.`arrival`
        ELSE `ConnStop`.`departure`
    END, `Stop`.`stopName` FROM `ConnStop`
    JOIN `Stop` ON `Stop`.`stopNumber` = `ConnStop`.`stopNumber` AND `Stop`.`tab` = `ConnStop`.`tab`
    JOIN `SeqOfConn` ON `SeqOfConn`.`connNumber` = `ConnStop`.`connNumber` AND `SeqOfConn`.`line` = `ConnStop`.`line`
    WHERE (
        `ConnStop`.`departure` IS NOT NULL
        OR `ConnStop`.`arrival` IS NOT NULL
    )
    AND `ConnStop`.`tab` IN :tabs
    GROUP BY `SeqOfConn`.`sequence`
    HAVING MIN(CASE
        WHEN `ConnStop`.`departure` IS NULL THEN `ConnStop`.`arrival`
        ELSE `ConnStop`.`departure`
    END)
)
SELECT `SeqOfConn`.`sequence`, `Conn`.`fixedCodes`, startStopIndexOnThisLine.time start, endStopIndexOnThisLine.time `end`, `TimeCode`.`type`, `TimeCode`.`validFrom` `from`, `TimeCode`.`validTo` `to`, `Conn`.`name` connName FROM `Conn`
JOIN `SeqOfConn` ON `SeqOfConn`.`connNumber` = `Conn`.`connNumber` AND `SeqOfConn`.`line` = `Conn`.`line`
JOIN startStopIndexOnThisLine ON startStopIndexOnThisLine.`sequence` = `SeqOfConn`.`sequence`
JOIN endStopIndexOnThisLine ON endStopIndexOnThisLine.`sequence` = `SeqOfConn`.`sequence`
JOIN `TimeCode` ON `TimeCode`.`connNumber` = `Conn`.`connNumber` AND `TimeCode`.`tab` = `Conn`.`tab`
WHERE `SeqOfConn`.`sequence` IN TodayRunningSequences
AND `Conn`.`tab` IN :tabs
AND `SeqOfConn`.`group` IN :groups;

oneDirectionLines:
SELECT DISTINCT `Conn`.`line` FROM `Conn`
GROUP BY `Conn`.`line`
HAVING COUNT(DISTINCT `Conn`.`direction`) = 1;

connStops:
SELECT `Conn`.`name` connName, CASE
    WHEN `ConnStop`.`departure` IS NULL THEN `ConnStop`.`arrival`
    ELSE `ConnStop`.`departure`
END time, `Stop`.`stopName` `name`, `ConnStop`.`stopIndexOnLine` FROM `Conn`
JOIN `ConnStop` ON `ConnStop`.`connNumber` = `Conn`.`connNumber` AND `ConnStop`.`tab` = `Conn`.`tab`
JOIN `Stop` ON `Stop`.`stopNumber` = `ConnStop`.`stopNumber` AND `Stop`.`tab` = `ConnStop`.`tab`
WHERE `Conn`.`name` IN :connNames
AND `Conn`.`tab` IN :tabs
ORDER BY CASE
   WHEN `Conn`.`direction` = 'POSITIVE' THEN `ConnStop`.`stopIndexOnLine`
   ELSE -`ConnStop`.`stopIndexOnLine`
END;

hasRestriction:
SELECT `hasRestriction` FROM `Line`
WHERE `tab` = :tab
LIMIT 1;

validity:
SELECT `validFrom`, `validTo` FROM `Line`
WHERE `tab` = :tab
LIMIT 1;

doesConnExist:
SELECT `name` FROM `Conn`
WHERE `name` = :connName
LIMIT 1;

lineTables:
SELECT * FROM `Line`
WHERE `number` = :line;

seqGroups:
SELECT DISTINCT `SeqGroup`.* FROM `SeqGroup`
JOIN `SeqOfConn` ON `SeqOfConn`.`group` = `SeqGroup`.`group`
WHERE `SeqOfConn`.`sequence` = :seq;

allLineNumbers:
SELECT DISTINCT `number` FROM `Line`;

allSequences:
SELECT DISTINCT `sequence` FROM `SeqOfConn`;

insertConnStop:
INSERT INTO `ConnStop` (`tab`, `connNumber`, `stopIndexOnLine`, `line`, `stopNumber`, `kmFromStart`, `fixedCodes`, `arrival`, `departure`) VALUES ?;

insertStop:
INSERT INTO `Stop` (`tab`,`stopNumber`,`line`,`stopName`,`fixedCodes`) VALUES ?;

insertTimeCode:
INSERT INTO `TimeCode` (`tab`,`connNumber`,`code`,`termIndex`,`line`,`type`,`runs2`,`validFrom`,`validTo`) VALUES ?;

insertLine:
INSERT INTO `Line` (`tab`,`number`,`route`,`vehicleType`,`lineType`,`hasRestriction`,`shortNumber`,`validFrom`,`validTo`) VALUES ?;

insertConn:
INSERT INTO `Conn` (`tab`,`connNumber`,`line`,`fixedCodes`,`direction`,`name`) VALUES ?;

insertSeqOfConn:
INSERT INTO `SeqOfConn` (`line`,`connNumber`,`sequence`,`group`,`orderInSequence`) VALUES ?;

insertSeqGroup:
INSERT INTO `SeqGroup` (`group`,`validFrom`,`validTo`) VALUES ?;


allConnStops:
SELECT * FROM `ConnStop`;

allStops:
SELECT * FROM `Stop`;

allTimeCodes:
SELECT * FROM `TimeCode`;

allLines:
SELECT * FROM `Line`;

allConns:
SELECT * FROM `Conn`;

allSeqOfConns:
SELECT * FROM `SeqOfConn`;

allSeqGroups:
SELECT * FROM `SeqGroup`;

clearAll {
    DROP TABLE `ConnStop`;
    DROP TABLE `Stop`;
    DROP TABLE `TimeCode`;
    DROP TABLE `Line`;
    DROP TABLE `Conn`;
    DROP TABLE `SeqOfConn`;
    DROP TABLE `SeqGroup`;
}